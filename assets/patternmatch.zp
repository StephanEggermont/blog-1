(define (match pattern expression)
  (define (match1 p e alist lose)
    (if (null? p)
      (if (null? e) (list alist lose) (lose))
      (if (atom? (car p))
        (if (null? e)
          (lose)
          (if (eq? (car e) (car p))
            (match1 (cdr p) (cdr e) alist lose)
            (lose)))
        (if (eq? (caar p) 'THV)
          (if (null? e)
            (lose)
            ((lambda (v)
              (if v
                (if (eq? (car e) (cadr p))
                  (match1 (cdr p) (cdr e) alist lose)
                  (lose))
                (match1 (cdr p) (cdr e) (cons (list (cadar p) (car e)) alist) lose)))
              (assq (cadar p) alist)))
          (if (eq? (caar p) 'THV*)
            ((lambda (v)
              (if v
                (if (< (length e) (length (cadr v)))
                  (lose)
                  (if (eq? (nfirst e (length (cadr v))) (cadr v))
                    (match1 (cdr p) (nrest e (length (cadr v))) alist lose)
                    (lose)))
                (let ((match*
                        (lambda (n)
                          (if (> n (length e))
                            (lose)
                            (match1 (cdr p) (nrest e n)
                                    (cons (list (cadar p) (nfirst e n)) alist)
                                    (lambda () (match* (+ n 1))))))))
                  (match* 0))))
              (assq (cadar p) alist))
            (lose))))))
  (match1 pattern expression (nil) (lambda () (nil))))
