(define (my-true x y) (x))

(define (my-false x y) (y))

(define-syntax my-if
  (syntax-rules ()
    ((_ condition tbody fbody)
      (condition (lambda () tbody) (lambda () fbody)))))

(my-if my-true (write "yay") (write "nay"))

(define-syntax my-cond
  (syntax-rules (else)
    ((_ else result)
     ((lambda () result)))
    ((_ test result)
     (if test result))
    ((_ test result
        rest ...)
     (if test
       result
       (my-cond rest ...)))))

(my-cond (eq? 1 2) (write "nay") else (write "yay"))
(my-cond (eq? 1 1) (write "yay") else (write "nay"))

(define-syntax my-case
  (syntax-rules (else)
    ((_ key
       else result)
     (if #t result))
    ((_ key
       (atoms ...) result)
     (if (in? '(atoms ...) key)
       result1))
    ((_ key
       (atoms ...) result
       clause clauses ...)
     (if (in? '(atoms ...) key)
       result
       (my-case key clause clauses ...)))))

(my-case 1 (2 3) (write "nay") else (write "yay"))
(my-case 1 (1 2) (write "yay") else (write "nay"))
