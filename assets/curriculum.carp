(use-all Array Pattern)

(deftype Course [professor String
                 name      String
                 major     String
                 number    Int])

(deftype Curriculum [courses (Array Course)])

(def pat #"([^:]+): ([^\(]+) \(([A-Z]+) (\d+)\)")

(defn parse-line [line]
  ; for each line, we match our pattern and
  ; put the groups into a Course struct
  (let [groups (match pat line)
        prof @(nth &groups 0)
        name @(nth &groups 1)
        major @(nth &groups 2)
        num (Int.from-string (nth &groups 3))]
    (Course.init prof name major num)))

(defn parse [curriculum]
  ; we begin by splitting curriculum into lines
  (let [lines (String.lines curriculum)
        ; then we go over the lines, parsing
        ; every one. we'll end up with a list
        ; of courses
        courses (copy-map parse-line &lines)]
    ; now we wrap it into a curriculum, and weâ€™re
    ; done!
    (Curriculum.init courses)))

(defn main []
  (IO.println &(Curriculum.str &(parse (IO.read-file "curriculum.txt")))))
