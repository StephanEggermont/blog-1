(define *modules* #{})

(define-syntax import
  (syntax-rules ()
    ((import name)
      (import name name))
    ((import name as)
      (let ((env (current-env))
            (_name (if (symbol? 'name) (symbol->string 'name) name)))
        (if (not (in? _name #\:))
          (hash:kv-map
            ($
              (eval `(define ,(string->symbol (++ (->string 'as) ":"
                                                  (->string (car %))))
                             ,(cadr %))
                    env))
            (*modules* _name))
          (let* ((fullname (string:split _name #\:))
                 (_module (car fullname))
                 (function (cadr fullname)))
            (eval `(define ,(->symbol 'as) ,((*modules* _module) function))
                  env)))))))

(define-syntax defmodule
  (syntax-rules (export require)
    ((module name (export exports ...) (require files ...) x ...)
     ((lambda ()
      (let ((env (current-env)))
        (begin
          (map
            (lambda (file) (load file env))
            'files)
          (module name (export exports ...) x ...))))))
    ((module name (export exports ...) body ...)
      (let ()
        body ...
        (hash:set! *modules* (->string 'name)
          (make-hash
            (map ($ (if (list? %)
                      (cons (->string (caddr %)) (eval (car %)))
                      (list (->string %) (eval %))))
                 '(exports ...))))))))
